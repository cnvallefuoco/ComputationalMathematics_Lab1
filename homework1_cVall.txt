In this problem, we were given f'(x) = (1/2h)(-3f(x)+4f(x+h)-f(x+2h)). In the theoretical work, we found that
the error was second order. We see this when we run our m-file for this code, because as h decreases by a factor 
of 10, the error decreases by a factor of 10^2. The second order error I found in the theoretical portion of the
homework is shown in the error column when case A is run in the m-file.  
run_numerical_diff
   h           Approx Deriv      Error
   1.0000e-01   9.9460e-01   5.4042e-03
   1.0000e-02   9.9993e-01   6.5194e-05
   1.0000e-03   1.0000e+00   6.6517e-07
   1.0000e-04   1.0000e+00   6.6653e-09
   1.0000e-05   1.0000e+00   4.9012e-11
   1.0000e-06   1.0000e+00   1.9396e-10
   1.0000e-07   1.0000e+00   1.6941e-09
   1.0000e-08   1.0000e+00   1.7180e-08
   1.0000e-09   1.0000e+00   1.9376e-07
   1.0000e-10   1.0000e+00   8.2740e-08
   1.0000e-11   1.0000e+00   8.2740e-08
   1.0000e-12   1.0002e+00   1.9992e-04
   1.0000e-13   9.9809e-01   1.9095e-03
   1.0000e-14   9.9920e-01   7.9928e-04
   1.0000e-15   1.2212e+00   2.2125e-01
   1.0000e-16  -1.1102e+00   2.1102e+00
   1.0000e-17            0   1.0000e+00

In the theoretical work for this problem, I found that the truncation error was (-h/2)(f''(Cx0)). We can say that
the truncation error is first order. This statement is proven by the errors we got in matlab. The table below shows
that as h decreases by a factor of 10, the error also decreases by a factor of 10. 
For 3c, I found that h equals sqrt(epsilon), which is about 1.4e-8. When we look at the h value closest to the one
found in the theoretical work, it is associated with the smallest error value (2.4759e-11).This shows that the error
term I found is consistent with the values observed below. 
run_numerical_diff
   h           Approx Deriv      Error
   1.0000e-01   9.5894e-01   4.1060e-02
   1.0000e-02   9.9510e-01   4.9012e-03
   1.0000e-03   9.9950e-01   4.9900e-04
   1.0000e-04   9.9995e-01   4.9990e-05
   1.0000e-05   1.0000e+00   4.9999e-06
   1.0000e-06   1.0000e+00   4.9997e-07
   1.0000e-07   1.0000e+00   5.0526e-08
   1.0000e-08   1.0000e+00   2.4759e-11
   1.0000e-09   1.0000e+00   2.8782e-08
   1.0000e-10   1.0000e+00   8.2690e-08
   1.0000e-11   1.0000e+00   8.2735e-08
   1.0000e-12   9.9998e-01   2.2122e-05
   1.0000e-13   1.0003e+00   3.1095e-04
   1.0000e-14   9.9920e-01   7.9928e-04
   1.0000e-15   9.9920e-01   7.9928e-04
   1.0000e-16   1.1102e+00   1.1022e-01
   1.0000e-17            0   1.0000e+00

In the theoretical, I found the truncation error to be first order, specifically hf'(x). This means that when h decreases 
by a factor of 10, the error decreases by a factor of 10. We can see that this pattern holds true in the table below. In 4c, 
I found that the optimal h value for minimal error would be the cube root of epsilon, or 5.8e-6. At the h value closest to this
error, 1.0e-6, we see that the error value is at one of smallest points. The reason that the h value I estimated is not at the 
smallest error could be due to how constants were dropped when finding h.
run_numerical_diff
   h           Approx Deriv      Error
   1.0000e-01  -1.2423e+00   2.4225e-01
   1.0000e-02  -1.0204e+00   2.0356e-02
   1.0000e-03  -1.0020e+00   2.0035e-03
   1.0000e-04  -1.0002e+00   2.0004e-04
   1.0000e-05  -1.0000e+00   2.1111e-05
   1.0000e-06  -9.9989e-01   1.0902e-04
   1.0000e-07  -1.0111e+00   1.1102e-02
   1.0000e-08   1.1022e-01   1.1102e+00
   1.0000e-09  -1.1202e+02   1.1102e+02
   1.0000e-10  -1.0000e+00   1.9070e-06
   1.0000e-11  -9.9998e-01   1.6188e-05
   1.0000e-12  -1.0000e+00   4.8436e-05
   1.0000e-13   1.1102e+10   1.1102e+10
   1.0000e-14  -9.7819e-01   2.1812e-02
   1.0000e-15  -7.8886e-01   2.1114e-01
   1.0000e-16  -4.9304e+00   3.9304e+00
   1.0000e-17            0   1.0000e+00

 
For this problem, although I forgot to find the order of the error in the theoretical part of the homework, I have now found
it to be first order. We can see in the table below that the maximal order of accuracy is in fact first order. As h decreases 
by a factor of 10, so does the error. 
run_numerical_diff
   h           Approx Deriv      Error
   1.0000e-01  -8.2988e-01   1.7012e-01
   1.0000e-02  -9.8034e-01   1.9656e-02
   1.0000e-03  -9.9800e-01   1.9965e-03
   1.0000e-04  -9.9980e-01   1.9997e-04
   1.0000e-05  -9.9998e-01   1.7779e-05
   1.0000e-06  -9.9978e-01   2.2404e-04
   1.0000e-07  -1.0222e+00   2.2204e-02
   1.0000e-08   1.2204e+00   2.2204e+00
   1.0000e-09  -2.2304e+02   2.2204e+02
   1.0000e-10  -1.0000e+00   1.9070e-06
   1.0000e-11  -9.9998e-01   1.6188e-05
   1.0000e-12  -2.2204e+08   2.2204e+08
   1.0000e-13   2.2204e+10   2.2204e+10
   1.0000e-14  -9.7819e-01   2.1812e-02
   1.0000e-15  -2.2204e+14   2.2204e+14
   1.0000e-16   2.2204e+16   2.2204e+16
   1.0000e-17            0   1.0000e+00
